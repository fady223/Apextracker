{"version":3,"sources":["style/apex-legends-icon.png","Main.js","App.js","Router.js","serviceWorker.js","index.js"],"names":["module","exports","Main","match","useState","state","setState","mainState","setMainState","fetchDate","a","fetch","params","platform","id","headers","data","json","player","console","log","stats","value","metadata","useEffect","rankName","src","rankImage","App","inputValue","setInputValue","selectValue","setSelectValue","history","useHistory","className","Icon","style","fontSize","color","fontFamily","padding","Select","variant","width","height","backgroundColor","onChange","e","target","MenuItem","type","borderRadius","border","margin","Button","onClick","push","Routers","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,+C,qKCE5B,SAASC,EAAT,GAA0B,IAAVC,EAAS,EAATA,MAAS,EACZC,qBADY,mBAC/BC,EAD+B,KACxBC,EADwB,OAEJF,mBAAS,IAFL,mBAE/BG,EAF+B,KAEpBC,EAFoB,KAGhCC,EAAS,uCAAG,8BAAAC,EAAA,sEACGC,MAAM,2DAAD,OACqCR,EAAMS,OAAOC,SADlD,YAC8DV,EAAMS,OAAOE,IACjG,CACEC,QAAS,CACP,cAAe,0CALL,cACVC,EADU,gBASKA,EAAKC,OATV,OASVC,EATU,OAUhBC,QAAQC,IAAIF,EAAOF,MAVH,SAYdV,EAASY,EAAOF,KAAKK,MAAM,GAAGC,OAC9Bd,EAAaU,EAAOF,KAAKO,UAbX,2EAeP,wCAfO,0DAAH,qDAsBf,OAJAC,qBAAU,WACRf,MACC,IAGD,6BACE,sCAAYJ,GACZ,oCAAUE,EAAUkB,UACpB,yBAAKC,IAAKnB,EAAUoB,a,0DCnBX,SAASC,IAAO,IAAD,EACQxB,mBAAS,IADjB,mBACrByB,EADqB,KACTC,EADS,OAEU1B,mBAAS,IAFnB,mBAErB2B,EAFqB,KAERC,EAFQ,KAGxBC,EAAUC,cACd,OACE,yBAAKC,UAAU,OACb,gCACE,yBAAKT,IAAKU,OAEZ,6BACA,yBAAKtB,GAAG,YACN,4BACE,4BACE,2BACEuB,MAAO,CACLC,SAAU,OACVC,MAAO,QACPC,WAAY,UACZC,QAAS,QALb,YAQY,KAEZ,kBAACC,EAAA,EAAD,CACEC,QAAQ,WACRrB,MAAOS,EACPM,MAAO,CACLO,MAAO,MACPC,OAAQ,OAERC,gBAAiB,SACjBP,MAAO,SAETQ,SAAU,SAACC,GAAD,OAAOhB,EAAegB,EAAEC,OAAO3B,SAEzC,kBAAC4B,EAAA,EAAD,CAAU5B,MAAM,KAAhB,OACA,kBAAC4B,EAAA,EAAD,CAAU5B,MAAM,KAAhB,MACA,kBAAC4B,EAAA,EAAD,CAAU5B,MAAM,KAAhB,UAGJ,4BACE,2BACEe,MAAO,CACLC,SAAU,OACVC,MAAO,QACPC,WAAY,YAJhB,YAOY,KAEZ,2BACEW,KAAK,OACLZ,MAAM,UACNF,MAAO,CACLE,MAAO,QACPa,aAAc,MACdC,OAAQ,aACRP,gBAAiB,SACjBF,MAAO,MACPC,OAAQ,QAEVF,QAAQ,WACRrB,MAAOO,EACPyB,OAAO,QACPP,SAAU,SAACC,GAAD,OAAOlB,EAAckB,EAAEC,OAAO3B,YAI9C,gCACE,kBAACiC,EAAA,EAAD,CACEhB,MAAM,UACNI,QAAQ,YACRN,MAAO,CAAEE,MAAO,WAChBiB,QAAS,SAACR,GAAD,OACPf,EAAQwB,KAAR,kBAAwB1B,EAAxB,YAAuCF,EAAvC,QALJ,a,YC7EK,SAAS6B,IACtB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWjC,IACjC,kBAAC,IAAD,CAAO+B,KAAK,wBAAwBE,UAAW3D,MCGnC4D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS9D,MACvB,2DCbN+D,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACV,EAAD,OAEFW,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3D,QAAQ2D,MAAMA,EAAMC,c","file":"static/js/main.26c77202.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/apex-legends-icon.1f310d75.png\";","import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nexport default function Main({ match }) {\r\n  const [state, setState] = useState();\r\n  const [mainState, setMainState] = useState({});\r\n  const fetchDate = async () => {\r\n    const data = await fetch(\r\n      ` https://public-api.tracker.gg/apex/v1/standard/profile/${match.params.platform}/${match.params.id}`,\r\n      {\r\n        headers: {\r\n          \"TRN-Api-Key\": \"fc39a867-8d1f-4fd4-847c-cec688812dc1\",\r\n        },\r\n      }\r\n    );\r\n    const player = await data.json();\r\n    console.log(player.data);\r\n    try {\r\n      setState(player.data.stats[0].value);\r\n      setMainState(player.data.metadata);\r\n    } catch (e) {\r\n      return <p>error...</p>;\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    fetchDate();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Level: {state}</h1>\r\n      <p>Rank: {mainState.rankName}</p>\r\n      <img src={mainState.rankImage} />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport Main from \"./Main\";\nimport \"./style/App.css\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  Button,\n  TextField,\n  Select,\n  MenuItem,\n  FormControlLabel,\n} from \"@material-ui/core\";\nimport Icon from \"./style/apex-legends-icon.png\";\nexport default function App() {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [selectValue, setSelectValue] = useState(\"\");\n  let history = useHistory();\n  return (\n    <div className=\"App\">\n      <center>\n        <img src={Icon} />\n      </center>\n      <br />\n      <div id=\"App-body\">\n        <ul>\n          <li>\n            <label\n              style={{\n                fontSize: \"20px\",\n                color: \"white\",\n                fontFamily: \"cursive\",\n                padding: \"5px\",\n              }}\n            >\n              Platform:{\" \"}\n            </label>\n            <Select\n              variant=\"outlined\"\n              value={selectValue}\n              style={{\n                width: \"60%\",\n                height: \"40px\",\n\n                backgroundColor: \"silver\",\n                color: \"black\",\n              }}\n              onChange={(e) => setSelectValue(e.target.value)}\n            >\n              <MenuItem value=\"2\">PS5</MenuItem>\n              <MenuItem value=\"5\">PC</MenuItem>\n              <MenuItem value=\"1\">Xbox</MenuItem>\n            </Select>\n          </li>\n          <li>\n            <label\n              style={{\n                fontSize: \"20px\",\n                color: \"white\",\n                fontFamily: \"cursive\",\n              }}\n            >\n              Username:{\" \"}\n            </label>\n            <input\n              type=\"text\"\n              color=\"default\"\n              style={{\n                color: \"black\",\n                borderRadius: \"5px\",\n                border: \"1px solid \",\n                backgroundColor: \"silver\",\n                width: \"60%\",\n                height: \"35px\",\n              }}\n              variant=\"outlined\"\n              value={inputValue}\n              margin=\"dense\"\n              onChange={(e) => setInputValue(e.target.value)}\n            />\n          </li>\n        </ul>\n        <center>\n          <Button\n            color=\"default\"\n            variant=\"contained\"\n            style={{ color: \"#161616\" }}\n            onClick={(e) =>\n              history.push(`/player/${selectValue}/${inputValue} `)\n            }\n          >\n            Search\n          </Button>\n        </center>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport Main from \"./Main\";\r\nexport default function Routers() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/\" exact component={App} />\r\n        <Route path=\"/player/:platform/:id\" component={Main} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport Routers from \"./Router\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(\n  <React.StrictMode>\n    <Routers />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}